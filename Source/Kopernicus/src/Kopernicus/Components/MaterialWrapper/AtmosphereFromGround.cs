// Material wrapper generated by shader translator tool

using System;
using System.Diagnostics.CodeAnalysis;
using UnityEngine;

namespace Kopernicus.Components.MaterialWrapper
{
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
    [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    public class AtmosphereFromGround : Material
    {
        // Internal property ID tracking object
        protected class Properties
        {
            // Return the shader for this wrapper
            private const String SHADER_NAME = "AtmosphereFromGround";

            public static Shader Shader
            {
                get { return Shader.Find(SHADER_NAME); }
            }

            // Offset Transform, default = (0,0,0,1)
            public const String OFFSET_TRANSFORM_KEY = "_OffsetTransform";
            public Int32 OffsetTransformId { get; private set; }

            // Camera Position, default = (0,0,0,0)
            public const String V4_CAMERA_POS_KEY = "_v4CameraPos";
            public Int32 V4CameraPosId { get; private set; }

            // Light Direction, default = (0,0,0,0)
            public const String V4_LIGHT_DIR_KEY = "_v4LightDir";
            public Int32 V4LightDirId { get; private set; }

            // Inverse WaveLength, default = (0,0,0,0)
            public const String C_INV_WAVE_LENGTH_KEY = "_cInvWaveLength";
            public Int32 CInvWaveLengthId { get; private set; }

            // Camera Height, default = 0
            public const String F_CAMERA_HEIGHT_KEY = "_fCameraHeight";
            public Int32 FCameraHeightId { get; private set; }

            // Camera Height2, default = 0
            public const String F_CAMERA_HEIGHT2_KEY = "_fCameraHeight2";
            public Int32 FCameraHeight2Id { get; private set; }

            // Outer Radius, default = 0
            public const String F_OUTER_RADIUS_KEY = "_fOuterRadius";
            public Int32 FOuterRadiusId { get; private set; }

            // Outer Radius 2, default = 0
            public const String F_OUTER_RADIUS2_KEY = "_fOuterRadius2";
            public Int32 FOuterRadius2Id { get; private set; }

            // Inner Radius, default = 0
            public const String F_INNER_RADIUS_KEY = "_fInnerRadius";
            public Int32 FInnerRadiusId { get; private set; }

            // Inner Radius 2, default = 0
            public const String F_INNER_RADIUS2_KEY = "_fInnerRadius2";
            public Int32 FInnerRadius2Id { get; private set; }

            // KrESun, default = 0
            public const String F_KR_E_SUN_KEY = "_fKrESun";
            public Int32 FKrESunId { get; private set; }

            // KmESun, default = 0
            public const String F_KM_E_SUN_KEY = "_fKmESun";
            public Int32 FKmESunId { get; private set; }

            // Kr4PI, default = 0
            public const String F_KR4_PI_KEY = "_fKr4PI";
            public Int32 FKr4Piid { get; private set; }

            // Km4PI, default = 0
            public const String F_KM4_PI_KEY = "_fKm4PI";
            public Int32 FKm4Piid { get; private set; }

            // Scale, default = 0
            public const String F_SCALE_KEY = "_fScale";
            public Int32 FScaleId { get; private set; }

            // Scale Depth, default = 0
            public const String F_SCALE_DEPTH_KEY = "_fScaleDepth";
            public Int32 FScaleDepthId { get; private set; }

            // Scale Over Scale Depth, default = 0
            public const String F_SCALE_OVER_SCALE_DEPTH_KEY = "_fScaleOverScaleDepth";
            public Int32 FScaleOverScaleDepthId { get; private set; }

            // Samples, default = 0
            public const String SAMPLES_KEY = "_Samples";
            public Int32 SamplesId { get; private set; }

            // G, default = 0
            public const String G_KEY = "_G";
            public Int32 GId { get; private set; }

            // G2, default = 0
            public const String G2_KEY = "_G2";
            public Int32 G2Id { get; private set; }

            // Exposure, default = 0
            public const String F_EXPOSURE_KEY = "_fExposure";
            public Int32 FExposureId { get; private set; }

            // Camera Depth, default = 0
            public const String F_CAM_HEIGHT_UNDERWATER_KEY = "_fCamHeightUnderwater";
            public Int32 FCamHeightUnderwaterId { get; private set; }

            // Underwater Opacity Base, default = 0
            public const String UNDERWATER_OPACITY_ALT_BASE_KEY = "_underwaterOpacityAltBase";
            public Int32 UnderwaterOpacityAltBaseId { get; private set; }

            // Underwater Opacity Alt Mult, default = 0
            public const String UNDERWATER_OPACITY_ALT_MULT_KEY = "_underwaterOpacityAltMult";
            public Int32 UnderwaterOpacityAltMultId { get; private set; }

            // Underwater Color Start, default = (0,0,0,0)
            public const String UNDERWATER_COLOR_START_KEY = "_underwaterColorStart";
            public Int32 UnderwaterColorStartId { get; private set; }

            // Underwater Color End, default = (0,0,0,0)
            public const String UNDERWATER_COLOR_END_KEY = "_underwaterColorEnd";
            public Int32 UnderwaterColorEndId { get; private set; }

            // Light dot with up axis, default = 0
            public const String LIGHT_DOT_KEY = "_lightDot";
            public Int32 LightDotId { get; private set; }

            // Singleton instance
            private static Properties _singleton;

            public static Properties Instance
            {
                get
                {
                    // Construct the singleton if it does not exist
                    return _singleton ?? (_singleton = new Properties());
                }
            }

            private Properties()
            {
                OffsetTransformId = Shader.PropertyToID(OFFSET_TRANSFORM_KEY);
                V4CameraPosId = Shader.PropertyToID(V4_CAMERA_POS_KEY);
                V4LightDirId = Shader.PropertyToID(V4_LIGHT_DIR_KEY);
                CInvWaveLengthId = Shader.PropertyToID(C_INV_WAVE_LENGTH_KEY);
                FCameraHeightId = Shader.PropertyToID(F_CAMERA_HEIGHT_KEY);
                FCameraHeight2Id = Shader.PropertyToID(F_CAMERA_HEIGHT2_KEY);
                FOuterRadiusId = Shader.PropertyToID(F_OUTER_RADIUS_KEY);
                FOuterRadius2Id = Shader.PropertyToID(F_OUTER_RADIUS2_KEY);
                FInnerRadiusId = Shader.PropertyToID(F_INNER_RADIUS_KEY);
                FInnerRadius2Id = Shader.PropertyToID(F_INNER_RADIUS2_KEY);
                FKrESunId = Shader.PropertyToID(F_KR_E_SUN_KEY);
                FKmESunId = Shader.PropertyToID(F_KM_E_SUN_KEY);
                FKr4Piid = Shader.PropertyToID(F_KR4_PI_KEY);
                FKm4Piid = Shader.PropertyToID(F_KM4_PI_KEY);
                FScaleId = Shader.PropertyToID(F_SCALE_KEY);
                FScaleDepthId = Shader.PropertyToID(F_SCALE_DEPTH_KEY);
                FScaleOverScaleDepthId = Shader.PropertyToID(F_SCALE_OVER_SCALE_DEPTH_KEY);
                SamplesId = Shader.PropertyToID(SAMPLES_KEY);
                GId = Shader.PropertyToID(G_KEY);
                G2Id = Shader.PropertyToID(G2_KEY);
                FExposureId = Shader.PropertyToID(F_EXPOSURE_KEY);
                FCamHeightUnderwaterId = Shader.PropertyToID(F_CAM_HEIGHT_UNDERWATER_KEY);
                UnderwaterOpacityAltBaseId = Shader.PropertyToID(UNDERWATER_OPACITY_ALT_BASE_KEY);
                UnderwaterOpacityAltMultId = Shader.PropertyToID(UNDERWATER_OPACITY_ALT_MULT_KEY);
                UnderwaterColorStartId = Shader.PropertyToID(UNDERWATER_COLOR_START_KEY);
                UnderwaterColorEndId = Shader.PropertyToID(UNDERWATER_COLOR_END_KEY);
                LightDotId = Shader.PropertyToID(LIGHT_DOT_KEY);
            }
        }

        // Is some random material this material
        public static Boolean UsesSameShader(Material m)
        {
            if (m == null)
            {
                return false;
            }

            return m.shader.name == Properties.Shader.name;
        }

        // Offset Transform, default = (0,0,0,1)
        public Vector4 OffsetTransform
        {
            get { return GetVector(Properties.Instance.OffsetTransformId); }
            set { SetVector(Properties.Instance.OffsetTransformId, value); }
        }

        // Camera Position, default = (0,0,0,0)
        public Vector4 V4CameraPos
        {
            get { return GetVector(Properties.Instance.V4CameraPosId); }
            set { SetVector(Properties.Instance.V4CameraPosId, value); }
        }

        // Light Direction, default = (0,0,0,0)
        public Vector4 V4LightDir
        {
            get { return GetVector(Properties.Instance.V4LightDirId); }
            set { SetVector(Properties.Instance.V4LightDirId, value); }
        }

        // Inverse WaveLength, default = (0,0,0,0)
        public Color CInvWaveLength
        {
            get { return GetColor(Properties.Instance.CInvWaveLengthId); }
            set { SetColor(Properties.Instance.CInvWaveLengthId, value); }
        }

        // Camera Height, default = 0
        public Single FCameraHeight
        {
            get { return GetFloat(Properties.Instance.FCameraHeightId); }
            set { SetFloat(Properties.Instance.FCameraHeightId, value); }
        }

        // Camera Height2, default = 0
        public Single FCameraHeight2
        {
            get { return GetFloat(Properties.Instance.FCameraHeight2Id); }
            set { SetFloat(Properties.Instance.FCameraHeight2Id, value); }
        }

        // Outer Radius, default = 0
        public Single FOuterRadius
        {
            get { return GetFloat(Properties.Instance.FOuterRadiusId); }
            set { SetFloat(Properties.Instance.FOuterRadiusId, value); }
        }

        // Outer Radius 2, default = 0
        public Single FOuterRadius2
        {
            get { return GetFloat(Properties.Instance.FOuterRadius2Id); }
            set { SetFloat(Properties.Instance.FOuterRadius2Id, value); }
        }

        // Inner Radius, default = 0
        public Single FInnerRadius
        {
            get { return GetFloat(Properties.Instance.FInnerRadiusId); }
            set { SetFloat(Properties.Instance.FInnerRadiusId, value); }
        }

        // Inner Radius 2, default = 0
        public Single FInnerRadius2
        {
            get { return GetFloat(Properties.Instance.FInnerRadius2Id); }
            set { SetFloat(Properties.Instance.FInnerRadius2Id, value); }
        }

        // KrESun, default = 0
        public Single FKrESun
        {
            get { return GetFloat(Properties.Instance.FKrESunId); }
            set { SetFloat(Properties.Instance.FKrESunId, value); }
        }

        // KmESun, default = 0
        public Single FKmESun
        {
            get { return GetFloat(Properties.Instance.FKmESunId); }
            set { SetFloat(Properties.Instance.FKmESunId, value); }
        }

        // Kr4PI, default = 0
        public Single FKr4Pi
        {
            get { return GetFloat(Properties.Instance.FKr4Piid); }
            set { SetFloat(Properties.Instance.FKr4Piid, value); }
        }

        // Km4PI, default = 0
        public Single FKm4Pi
        {
            get { return GetFloat(Properties.Instance.FKm4Piid); }
            set { SetFloat(Properties.Instance.FKm4Piid, value); }
        }

        // Scale, default = 0
        public Single FScale
        {
            get { return GetFloat(Properties.Instance.FScaleId); }
            set { SetFloat(Properties.Instance.FScaleId, value); }
        }

        // Scale Depth, default = 0
        public Single FScaleDepth
        {
            get { return GetFloat(Properties.Instance.FScaleDepthId); }
            set { SetFloat(Properties.Instance.FScaleDepthId, value); }
        }

        // Scale Over Scale Depth, default = 0
        public Single FScaleOverScaleDepth
        {
            get { return GetFloat(Properties.Instance.FScaleOverScaleDepthId); }
            set { SetFloat(Properties.Instance.FScaleOverScaleDepthId, value); }
        }

        // Samples, default = 0
        public Single Samples
        {
            get { return GetFloat(Properties.Instance.SamplesId); }
            set { SetFloat(Properties.Instance.SamplesId, value); }
        }

        // G, default = 0
        public Single G
        {
            get { return GetFloat(Properties.Instance.GId); }
            set { SetFloat(Properties.Instance.GId, value); }
        }

        // G2, default = 0
        public Single G2
        {
            get { return GetFloat(Properties.Instance.G2Id); }
            set { SetFloat(Properties.Instance.G2Id, value); }
        }

        // Exposure, default = 0
        public Single FExposure
        {
            get { return GetFloat(Properties.Instance.FExposureId); }
            set { SetFloat(Properties.Instance.FExposureId, value); }
        }

        // Camera Depth, default = 0
        public Single FCamHeightUnderwater
        {
            get { return GetFloat(Properties.Instance.FCamHeightUnderwaterId); }
            set { SetFloat(Properties.Instance.FCamHeightUnderwaterId, value); }
        }

        // Underwater Opacity Base, default = 0
        public Single UnderwaterOpacityAltBase
        {
            get { return GetFloat(Properties.Instance.UnderwaterOpacityAltBaseId); }
            set { SetFloat(Properties.Instance.UnderwaterOpacityAltBaseId, value); }
        }

        // Underwater Opacity Alt Mult, default = 0
        public Single UnderwaterOpacityAltMult
        {
            get { return GetFloat(Properties.Instance.UnderwaterOpacityAltMultId); }
            set { SetFloat(Properties.Instance.UnderwaterOpacityAltMultId, value); }
        }

        // Underwater Color Start, default = (0,0,0,0)
        public Color UnderwaterColorStart
        {
            get { return GetColor(Properties.Instance.UnderwaterColorStartId); }
            set { SetColor(Properties.Instance.UnderwaterColorStartId, value); }
        }

        // Underwater Color End, default = (0,0,0,0)
        public Color UnderwaterColorEnd
        {
            get { return GetColor(Properties.Instance.UnderwaterColorEndId); }
            set { SetColor(Properties.Instance.UnderwaterColorEndId, value); }
        }

        // Light dot with up axis, default = 0
        public Single LightDot
        {
            get { return GetFloat(Properties.Instance.LightDotId); }
            set { SetFloat(Properties.Instance.LightDotId, value); }
        }

        public AtmosphereFromGround() : base(Properties.Shader)
        {
        }

        [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
        public AtmosphereFromGround(String contents) : base(contents)
        {
            shader = Properties.Shader;
        }

        public AtmosphereFromGround(Material material) : base(material)
        {
            // Throw exception if this material was not the proper material
            if (material.shader.name != Properties.Shader.name)
            {
                throw new InvalidOperationException("Type Mismatch: AtmosphereFromGround shader required");
            }
        }

    }
}
