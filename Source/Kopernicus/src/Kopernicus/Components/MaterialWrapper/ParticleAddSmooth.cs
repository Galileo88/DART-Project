// Material wrapper generated by shader translator tool

using System;
using System.Diagnostics.CodeAnalysis;
using UnityEngine;

namespace Kopernicus.Components.MaterialWrapper
{
    [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
    public class ParticleAddSmooth : Material
    {
        // Internal property ID tracking object
        protected class Properties
        {
            // Return the shader for this wrapper
            private const String SHADER_NAME = "Legacy Shaders/Particles/Additive (Soft)";

            public static Shader Shader
            {
                get { return Shader.Find(SHADER_NAME); }
            }

            // Particle Texture, default = "white" { }
            public const String MAIN_TEX_KEY = "_MainTex";
            public Int32 MainTexId { get; private set; }

            // Soft Particles Factor, default = 1
            public const String INV_FADE_KEY = "_InvFade";
            public Int32 InvFadeId { get; private set; }

            // Singleton instance
            private static Properties _singleton;

            public static Properties Instance
            {
                get
                {
                    // Construct the singleton if it does not exist
                    return _singleton ?? (_singleton = new Properties());
                }
            }

            private Properties()
            {
                MainTexId = Shader.PropertyToID(MAIN_TEX_KEY);
                InvFadeId = Shader.PropertyToID(INV_FADE_KEY);
            }
        }

        // Is some random material this material 
        [SuppressMessage("ReSharper", "UnusedMember.Global")]
        public static Boolean UsesSameShader(Material m)
        {
            if (m == null)
            {
                return false;
            }

            return m.shader.name == Properties.Shader.name;
        }

        // Particle Texture, default = "white" { }
        public Texture2D MainTex
        {
            get { return GetTexture(Properties.Instance.MainTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTexId, value); }
        }

        public Vector2 MainTexScale
        {
            get { return GetTextureScale(Properties.Instance.MainTexId); }
            set { SetTextureScale(Properties.Instance.MainTexId, value); }
        }

        public Vector2 MainTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.MainTexId); }
            set { SetTextureOffset(Properties.Instance.MainTexId, value); }
        }

        // Soft Particles Factor, default = 1
        public Single InvFade
        {
            get { return GetFloat(Properties.Instance.InvFadeId); }
            set { SetFloat(Properties.Instance.InvFadeId, Mathf.Clamp(value, 0.01f, 3f)); }
        }

        public ParticleAddSmooth() : base(Properties.Shader)
        {
        }

        [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
        public ParticleAddSmooth(String contents) : base(contents)
        {
            shader = Properties.Shader;
        }

        public ParticleAddSmooth(Material material) : base(material)
        {
            // Throw exception if this material was not the proper material
            if (material.shader.name != Properties.Shader.name)
            {
                throw new InvalidOperationException("Type Mismatch: Legacy Shaders/Particles/Additive (Soft) shader required");
            }
        }

    }
}
