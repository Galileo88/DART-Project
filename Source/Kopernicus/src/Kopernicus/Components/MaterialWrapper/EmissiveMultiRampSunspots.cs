// Material wrapper generated by shader translator tool

using System;
using System.Diagnostics.CodeAnalysis;
using UnityEngine;

namespace Kopernicus.Components.MaterialWrapper
{
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
    [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
    public class EmissiveMultiRampSunspots : Material
    {
        // Internal property ID tracking object
        protected class Properties
        {
            // Return the shader for this wrapper
            private const String SHADER_NAME = "Emissive Multi Ramp Sunspots";

            public static Shader Shader
            {
                get { return Shader.Find(SHADER_NAME); }
            }

            // Ramp Map (RGBA), default = "white" { }
            public const String RAMP_MAP_KEY = "_RampMap";
            public Int32 RampMapId { get; private set; }

            // Noise Map (RGBA), default = "white" { }
            public const String NOISE_MAP_KEY = "_NoiseMap";
            public Int32 NoiseMapId { get; private set; }

            // Emission Color 0, default = (1,1,1,1)
            public const String EMIT_COLOR0_KEY = "_EmitColor0";
            public Int32 EmitColor0Id { get; private set; }

            // Emission Color 1, default = (1,1,1,1)
            public const String EMIT_COLOR1_KEY = "_EmitColor1";
            public Int32 EmitColor1Id { get; private set; }

            // Sunspot Map (R), default = "white" { }
            public const String SUNSPOT_TEX_KEY = "_SunspotTex";
            public Int32 SunspotTexId { get; private set; }

            // Sunspot Power, default = 1
            public const String SUNSPOT_POWER_KEY = "_SunspotPower";
            public Int32 SunspotPowerId { get; private set; }

            // Sunspot Color, default = (0,0,0,0)
            public const String SUNSPOT_COLOR_KEY = "_SunspotColor";
            public Int32 SunspotColorId { get; private set; }

            // Rimlight Color, default = (1,1,1,1)
            public const String RIM_COLOR_KEY = "_RimColor";
            public Int32 RimColorId { get; private set; }

            // Rimlight Power, default = 0.2
            public const String RIM_POWER_KEY = "_RimPower";
            public Int32 RimPowerId { get; private set; }

            // Rimlight Blend, default = 0.2
            public const String RIM_BLEND_KEY = "_RimBlend";
            public Int32 RimBlendId { get; private set; }

            // Singleton instance
            private static Properties _singleton;

            public static Properties Instance
            {
                get
                {
                    // Construct the singleton if it does not exist
                    return _singleton ?? (_singleton = new Properties());
                }
            }

            private Properties()
            {
                RampMapId = Shader.PropertyToID(RAMP_MAP_KEY);
                NoiseMapId = Shader.PropertyToID(NOISE_MAP_KEY);
                EmitColor0Id = Shader.PropertyToID(EMIT_COLOR0_KEY);
                EmitColor1Id = Shader.PropertyToID(EMIT_COLOR1_KEY);
                SunspotTexId = Shader.PropertyToID(SUNSPOT_TEX_KEY);
                SunspotPowerId = Shader.PropertyToID(SUNSPOT_POWER_KEY);
                SunspotColorId = Shader.PropertyToID(SUNSPOT_COLOR_KEY);
                RimColorId = Shader.PropertyToID(RIM_COLOR_KEY);
                RimPowerId = Shader.PropertyToID(RIM_POWER_KEY);
                RimBlendId = Shader.PropertyToID(RIM_BLEND_KEY);
            }
        }

        // Is some random material this material 
        public static Boolean UsesSameShader(Material m)
        {
            if (m == null)
            {
                return false;
            }

            return m.shader.name == Properties.Shader.name;
        }

        // Ramp Map (RGBA), default = "white" { }
        public Texture2D RampMap
        {
            get { return GetTexture(Properties.Instance.RampMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.RampMapId, value); }
        }

        public Vector2 RampMapScale
        {
            get { return GetTextureScale(Properties.Instance.RampMapId); }
            set { SetTextureScale(Properties.Instance.RampMapId, value); }
        }

        public Vector2 RampMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.RampMapId); }
            set { SetTextureOffset(Properties.Instance.RampMapId, value); }
        }

        // Noise Map (RGBA), default = "white" { }
        public Texture2D NoiseMap
        {
            get { return GetTexture(Properties.Instance.NoiseMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.NoiseMapId, value); }
        }

        public Vector2 NoiseMapScale
        {
            get { return GetTextureScale(Properties.Instance.NoiseMapId); }
            set { SetTextureScale(Properties.Instance.NoiseMapId, value); }
        }

        public Vector2 NoiseMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.NoiseMapId); }
            set { SetTextureOffset(Properties.Instance.NoiseMapId, value); }
        }

        // Emission Color 0, default = (1,1,1,1)
        public Color EmitColor0
        {
            get { return GetColor(Properties.Instance.EmitColor0Id); }
            set { SetColor(Properties.Instance.EmitColor0Id, value); }
        }

        // Emission Color 1, default = (1,1,1,1)
        public Color EmitColor1
        {
            get { return GetColor(Properties.Instance.EmitColor1Id); }
            set { SetColor(Properties.Instance.EmitColor1Id, value); }
        }

        // Sunspot Map (R), default = "white" { }
        public Texture2D SunspotTex
        {
            get { return GetTexture(Properties.Instance.SunspotTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.SunspotTexId, value); }
        }

        public Vector2 SunspotTexScale
        {
            get { return GetTextureScale(Properties.Instance.SunspotTexId); }
            set { SetTextureScale(Properties.Instance.SunspotTexId, value); }
        }

        public Vector2 SunspotTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.SunspotTexId); }
            set { SetTextureOffset(Properties.Instance.SunspotTexId, value); }
        }

        // Sunspot Power, default = 1
        public Single SunspotPower
        {
            get { return GetFloat(Properties.Instance.SunspotPowerId); }
            set { SetFloat(Properties.Instance.SunspotPowerId, value); }
        }

        // Sunspot Color, default = (0,0,0,0)
        public Color SunspotColor
        {
            get { return GetColor(Properties.Instance.SunspotColorId); }
            set { SetColor(Properties.Instance.SunspotColorId, value); }
        }

        // Rimlight Color, default = (1,1,1,1)
        public Color RimColor
        {
            get { return GetColor(Properties.Instance.RimColorId); }
            set { SetColor(Properties.Instance.RimColorId, value); }
        }

        // Rimlight Power, default = 0.2
        public Single RimPower
        {
            get { return GetFloat(Properties.Instance.RimPowerId); }
            set { SetFloat(Properties.Instance.RimPowerId, value); }
        }

        // Rimlight Blend, default = 0.2
        public Single RimBlend
        {
            get { return GetFloat(Properties.Instance.RimBlendId); }
            set { SetFloat(Properties.Instance.RimBlendId, value); }
        }

        public EmissiveMultiRampSunspots() : base(Properties.Shader)
        {
        }

        [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
        public EmissiveMultiRampSunspots(String contents) : base(contents)
        {
            shader = Properties.Shader;
        }

        public EmissiveMultiRampSunspots(Material material) : base(material)
        {
            // Throw exception if this material was not the proper material
            if (material.shader.name != Properties.Shader.name)
            {
                throw new InvalidOperationException("Type Mismatch: Emissive Multi Ramp Sunspots shader required");
            }
        }

    }
}
