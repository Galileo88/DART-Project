PART
{
	name = Dimorphos
	module = Part
	author = JadeOfMaar
	MODEL
	{
		model = DART/Parts/Dimorphos
		scale = 73.841184, 73.841184, 73.841184
	}
	rescaleFactor = 1
	TechRequired = Unresearcheable
	entryCost = 0
	cost = 0
	category = none
	subcategory = 0
	title = Dimorphos
	manufacturer = Team Galileo
	description = #LOC_DART_Dimorphos_desc // The moon of a binary asteroid. Its parent body is Didymos.
	attachRules = 1,1,1,1,1
	mass = 4000000
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 1
	crashTolerance = 9999
	breakingForce = 200
	breakingTorque = 200
	maxTemp = 2500
	explosionPotential = 1.0
	skipColliderIgnores = True
	vesselType = SpaceObject
	skinInternalConductionMult = 100
	skinMassPerArea = 100
	bulkheadProfiles = roid
	tags = asteroid roid spud

	MODULE
	{
		// We need to use a custom asteroid module so that we can use our own 3D mesh and not a procedurally generated one.
		name = ModuleCustomAsteroid
		density = 0.03
		secondaryRate = 0.05
		AsteroidName = Dimorphos
	}

	MODULE
	{
		name = ModuleAsteroidInfo
	}
	MODULE
	{
		name = ModuleParallax
		partName = Dimorphos
	}

	MODULE
	{
		name = ModuleAsteroidResource
		highRange = 95
		lowRange = 50
		presenceChance = 100
		resourceName = Ore
	}

	// In order to smash probes into asteroids at high speeds, we need to set the asteroid part's crashTolerance to a high level or else it will explode on impact.
	// But the problem is that when the asteroid smashes into terrain, its high crashTolerance will leave it intact. This part module gets around the problem by
	// watching for collisions. If the part hits terrain, then it checks the impact velocity against the module's crashTolerance. If velocity exceeds the module's
	// crashTolerance then it will cause the part to explode.
	MODULE
	{
		name = ModuleImpactMonitor

		// The impact speed that the part can tolerate when it crashes into terrain.
		// Default is 160
		crashTolerance = 160
	}

	MODULE
	{
		// Persists the vessel's rotation through timewarp, going on/off rails, and scene changes.
		// Future enhancement: Turn this into a VesselModule so that all vessels can have persisted rotation, 
		// and make persisted rotation optional through a game setting. At that point this module would be used to
		// setup the initial rotation.
		name = ModulePersistedRotation

		// Will display the debug debug information and helpers.
//		debugMode = true

		// Imparts an initial rotation in degrees per second to the vessel along the pitch (x), roll (y), and yaw (z) axis.
		// This value will become the first persisted rotation. External forces can alter the persisted rotation.
		// The default is 0, which means the vessel won't initially be rotating but its rotation will still be persisted.
		// Converting Dimorphos' rotation period of 42911.3800951945 seconds to degrees per second: 360 / 42911.3800951945 = 0.008389382938
		initialRotationDegPerSec = 0.008389382938,0,0
	}

	MODULE
	{
		name = ModuleTidalLock
//		debugMode = true
		tidalLockBreakRatio = 0.03
	}
}

// Template for creating the Dimorphos space object.
SPACE_OBJECT
{
	// Identifier for the space object.
	name = DimorphosSpaceObject

	// Name of the part to spawn
	partName = Dimorphos

	// Normally an anomaly is something like OBJ-UWN-474 and it is automatically generated.
	// However, you can override the name by specifying the vesselName field.
	// Warning: using this can lead to duplicate vessel names if maxInstances is > 1.
	vesselName = Dimorphos

	// Like asteroids, space anomalies have a size class that ranges from Size A (12 meters) to Size I (100+ meters).
	// The default is A.
	sizeClass = I

	// The celestial body to spawn around.
	bodyOrbited = Didymos
	
	// The Semi-Major axis of the orbit.
	orbitSMA = 1180

	// The eccentrcity of the orbit.
	orbitEccentricity = 0

	// The inclination of the orbit. Default is -1, which enables random inclination.
	orbitInclination = 180

	// Maximum number of objects of this type that may exist at any given time. Default is 1.
	maxInstances = 1
}
